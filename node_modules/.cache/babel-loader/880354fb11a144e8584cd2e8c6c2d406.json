{"ast":null,"code":"var _jsxFileName = \"/Users/mayk/Downloads/weather-widget/src/features/weather/Weather.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport Loader from '../loader/Loader';\nimport Search from '../search/Search';\nimport CurrentWeather from '../current/Current';\nimport DailyWeather from '../daily/Daily';\nimport logo from '../../images/logo.png';\nimport styles from \"./Weather.module.css\";\nimport { fetchCurrentWeather, fetchWeatherForecast, weatherAction } from \"./weatherSlice\";\n\nconst Weather = () => {\n  const [city, setCity] = useState('Yangon');\n  const {\n    current,\n    loading,\n    error,\n    forecast\n  } = useSelector(state => state.weather);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchCurrentWeather(city)).then(res => {\n      const {\n        coord\n      } = res.payload.data;\n      dispatch(fetchWeatherForecast(coord));\n    }).catch(err => {\n      dispatch(weatherAction.setError(true));\n    });\n  }, [dispatch]); // Format Unix datetime from openweather api\n\n  const unixFormatter = (dt, format) => {\n    return moment(new Date(dt * 1000)).format(format);\n  }; // Format Unix datetime from openweather api\n\n\n  const onCityChanged = e => {\n    setCity(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    dispatch(fetchCurrentWeather(city));\n  }; // Weather Forecast for next 5 days\n\n\n  const showForecastWeather = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.forecast__container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, forecast.map((item, index) => /*#__PURE__*/React.createElement(DailyWeather, {\n    item: item,\n    key: index,\n    unixFormatter: unixFormatter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }))));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.background,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"open weather\",\n    className: styles.logo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    city: city,\n    onCityChanged: onCityChanged,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }), loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.weatherCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, current && !error && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 37\n    }\n  }, current.name, \" / \", current.sys.country), /*#__PURE__*/React.createElement(CurrentWeather, {\n    current: current,\n    unixFormatter: unixFormatter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 37\n    }\n  })), forecast && !error && showForecastWeather(), error && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }, \"City Not Found\"))));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/mayk/Downloads/weather-widget/src/features/weather/Weather.js"],"names":["React","useState","useEffect","useSelector","useDispatch","moment","Loader","Search","CurrentWeather","DailyWeather","logo","styles","fetchCurrentWeather","fetchWeatherForecast","weatherAction","Weather","city","setCity","current","loading","error","forecast","state","weather","dispatch","then","res","coord","payload","data","catch","err","setError","unixFormatter","dt","format","Date","onCityChanged","e","target","value","onSubmit","preventDefault","showForecastWeather","forecast__container","map","item","index","background","container","weatherCard","name","sys","country"],"mappings":"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","sourcesContent":["\nimport React, { useState,useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport Loader from '../loader/Loader';\nimport Search from '../search/Search';\nimport CurrentWeather from '../current/Current';\nimport DailyWeather from '../daily/Daily';\nimport logo from '../../images/logo.png'\nimport styles from \"./Weather.module.css\";\n\nimport {\n    fetchCurrentWeather,\n    fetchWeatherForecast,\n    weatherAction\n} from \"./weatherSlice\";\n\nconst Weather = () => {\n\n\tconst [city,setCity] = useState('Yangon')\n    const {current,loading,error,forecast} = useSelector(state => state.weather)\n    const dispatch = useDispatch()\n    \n    useEffect(() => {\n        dispatch(fetchCurrentWeather(city))\n        .then(res => {\n            const {coord} = res.payload.data\n            dispatch(fetchWeatherForecast(coord))\n        })\n        .catch(err => {\n            dispatch(weatherAction.setError(true))\n        })\n     }, [dispatch]);\n\n     \n    // Format Unix datetime from openweather api\n    const unixFormatter = (dt,format) => {\n        return moment(new Date(dt*1000)).format(format)\n    }\n\n    // Format Unix datetime from openweather api\n    const onCityChanged = (e) => {\n        setCity(e.target.value)\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        dispatch(fetchCurrentWeather(city))\n    }\n    \n    // Weather Forecast for next 5 days\n    const showForecastWeather = () => (\n        <>\n            <div className={styles.forecast__container}>\n                {\n                    forecast.map((item,index) => (\n                        <DailyWeather \n                            item={item} \n                            key={index}\n                            unixFormatter={unixFormatter}\n                        >\n                        </DailyWeather>\n                    ))\n                }\n            </div>\n        </>\n    )\n\n\treturn (\n\t\t<div className={styles.background}>  \n           <div className={styles.container}>\n                <img src={logo} alt=\"open weather\" className={styles.logo}></img>\n                <Search city={city} onCityChanged={onCityChanged} onSubmit={onSubmit}></Search>\n                {\n                    loading ? \n                    <Loader></Loader> : \n                    <div className={styles.weatherCard}>\n                        {\n                            current && !error &&\n                            (\n                            <>\n                                    <h2>{current.name} / {current.sys.country}</h2>\n                                    <CurrentWeather current={current} unixFormatter={unixFormatter}></CurrentWeather>\n                            </>\n                            )\n                        }\n                        {\n                            forecast && !error &&\n                            showForecastWeather()\n                        }\n                        {\n                            error &&\n                            <div>City Not Found</div>\n                        }\n                    </div>\n                }\n           </div>\n        </div>\n\t)\n}\n\nexport default Weather"]},"metadata":{},"sourceType":"module"}