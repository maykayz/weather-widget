{"ast":null,"code":"var _jsxFileName = \"/Users/mayk/Downloads/weather-widget/src/features/weather/Weather.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport styles from \"./Weather.module.css\";\nimport { fetchCurrentWeather, fetchWeatherForecast } from \"./weatherSlice\";\n\nconst Weather = () => {\n  const [city, setCity] = useState('Yangon');\n  const {\n    current,\n    loading,\n    error,\n    forecast\n  } = useSelector(state => state.weather);\n  const dispatch = useDispatch();\n  const today = moment().format('dddd, MMMM Do YYYY');\n\n  const getCurrentWeather = () => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(position.coords);\n        const {\n          latitude: lat,\n          longitude: long\n        } = position.coords;\n      });\n    } else {\n      /* geolocation IS NOT available */\n    }\n  };\n\n  const onCityChanged = e => {\n    setCity(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    dispatch(fetchCurrentWeather(city));\n  };\n\n  useEffect(() => {\n    dispatch(fetchCurrentWeather(city)).then(res => {\n      const {\n        coord\n      } = res.payload.data;\n      dispatch(fetchWeatherForecast(coord));\n    });\n    getCurrentWeather(); // dispatch(fetchWeatherForecast(city))\n  }, [dispatch]);\n\n  const showSearchBox = () => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: styles.form__input,\n    value: city,\n    onChange: onCityChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  })));\n\n  const showCurrentWeather = () => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, current.name), /*#__PURE__*/React.createElement(\"img\", {\n    className: styles.current__icon,\n    src: `http://openweathermap.org/img/wn/${current.weather[0].icon}@2x.png`,\n    alt: \"weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, current && current.main.temp, \" \\xB0C\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.current__weather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, current.weather[0].description))); // daily forecast item\n\n\n  const showForecastWeather = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.forecast__container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, forecast.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.forecast__daily,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, moment().add(index + 1, 'day').format('ddd')), /*#__PURE__*/React.createElement(\"img\", {\n    className: styles.forecast__icon,\n    src: `http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`,\n    alt: \"weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, item.temp.day, \" \\xB0C\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }, moment(item.dt).local().format('dddd, MMMM Do YYYY'))))));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.background,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, today), showSearchBox(), current && !loading && !error && showCurrentWeather(), forecast && !loading && !error && showForecastWeather(), loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"Loading .....\"), error && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, \"Data not found for \", city, \"...!\")));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/mayk/Downloads/weather-widget/src/features/weather/Weather.js"],"names":["React","useState","useEffect","useSelector","useDispatch","moment","styles","fetchCurrentWeather","fetchWeatherForecast","Weather","city","setCity","current","loading","error","forecast","state","weather","dispatch","today","format","getCurrentWeather","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","lat","longitude","long","onCityChanged","e","target","value","onSubmit","preventDefault","then","res","coord","payload","data","showSearchBox","form__input","showCurrentWeather","name","current__icon","icon","main","temp","current__weather","description","showForecastWeather","forecast__container","map","item","index","forecast__daily","add","forecast__icon","day","dt","local","background","container","date"],"mappings":"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","sourcesContent":["\nimport React, { useState,useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport styles from \"./Weather.module.css\";\nimport {\n    fetchCurrentWeather,\n    fetchWeatherForecast\n} from \"./weatherSlice\";\n\nconst Weather = () => {\n\n\tconst [city,setCity] = useState('Yangon')\n    const {current,loading,error,forecast} = useSelector(state => state.weather)\n    const dispatch = useDispatch()\n    const today = moment().format('dddd, MMMM Do YYYY')\n\n    const getCurrentWeather = () => {\n        if('geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                console.log(position.coords)\n                const {latitude: lat,longitude: long} = position.coords\n            });\n            \n        } else {\n        /* geolocation IS NOT available */\n        }\n    }\n\n    const onCityChanged = (e) => {\n        setCity(e.target.value)\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        dispatch(fetchCurrentWeather(city))\n    }\n    \n    useEffect(() => {\n        dispatch(fetchCurrentWeather(city)).then(res => {\n            const {coord} = res.payload.data\n            dispatch(fetchWeatherForecast(coord))\n            \n        })\n        getCurrentWeather()\n        // dispatch(fetchWeatherForecast(city))\n     }, [dispatch]);\n    \n     const showSearchBox = () => (\n       <div>\n            <form onSubmit={onSubmit}>\n                <input className={styles.form__input} value={city} onChange={onCityChanged}></input>\n                {/* <button className={styles.form__submit} onClick={onSubmit}>Search</button> */}\n            </form>\n       </div>\n     )\n\n    const showCurrentWeather = () => (\n        <div>\n            <h2>{current.name}</h2>\n            <img className={styles.current__icon} src={`http://openweathermap.org/img/wn/${current.weather[0].icon}@2x.png`} alt=\"weather\"></img>\n            <h1>{ current && current.main.temp} &#176;C</h1>\n            <div className={styles.current__weather}>\n                <h3>{current.weather[0].description}</h3>\n            </div>\n        </div>\n    )\n    \n    // daily forecast item\n    const showForecastWeather = () => (\n        <>\n            <div className={styles.forecast__container}>\n                {\n                    forecast.map((item,index) => (\n                        <div className={styles.forecast__daily} key={index}>\n                            <p>{moment().add(index+1, 'day').format('ddd')}</p>\n                            <img className={styles.forecast__icon} src={`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`} alt=\"weather\"></img>\n                            <p>{item.temp.day} &#176;C</p>\n                            <p>{moment(item.dt).local().format('dddd, MMMM Do YYYY')}</p>\n                        </div>\n                    ))\n                }\n            </div>\n        </>\n    )\n\treturn (\n\t\t<div className={styles.background}>  \n           <div className={styles.container}>\n            <div className={styles.date}>\n                    {today}\n                </div>\n                {\n                    showSearchBox()\n                }\n                {\n                    current && !loading && !error &&\n                    showCurrentWeather()\n                }\n                {\n                    forecast && !loading && !error &&\n                    showForecastWeather()\n                }\n                {\n                    loading && \n                    <div>Loading .....</div>\n                }\n                {\n                    error && \n                    <div>Data not found for {city}...!</div>\n                }\n           </div>\n        </div>\n\t)\n}\n\nexport default Weather"]},"metadata":{},"sourceType":"module"}